#------------------------
#R Languages Labs - 2019
#------------------------

#week 3 Lecture mats
#------------------------

library("learningr")
head(obama_vs_mccain)
obama <- obama_vs_mccain$Obama
mean(obama)
median(obama)
table(cut(obama, seq.int(0, 100, 10)))
var(obama)
summary(obama)
summary(obama_vs_mccain)
with(obama_vs_mccain, cor(Obama, McCain))
obama_vs_mccain <- obama_vs_mccain[!is.na(obama_vs_mccain$Turnout), ]
with(obama_vs_mccain, plot(Income, Turnout))
with(obama_vs_mccain, hist(obama))
with(obama_vs_mccain, hist(obama, 4, main = "An Exact Number of bins"))
histogram(~Obama,obama_vs_mccain)
boxplot(Obama~Region,data = obama_vs_mccain)

processed_data <- within(obama_vs_mccain, Region <- reorder(Region, Obama, median))
boxplot(Obama ~ Region, data = processed_data)
bwplot(Obama ~ Region, data = processed_data)



#Crab_dataset
#------------------------

crab_data <- read.csv("crab_data.csv")
summary(crab_data)
class(crab_data$Date)
library(lubridate)
crab_data$Date <- day(crab_data$Date)
class(crab_data$Date)

#Scientific Calculator
#------------------------

sum(1:10)
median(1:5)
1:5 + 2:6
c(1,3,6,10,15) + c(0,1,2,3,4)
sum(1,2,3,4,5)
median(1,2,3,4,5)
c(2, 3, 5, 7, 11, 13) - 2
identical(2 ^ 3, 2 ** 3)
1:3 / 3
1:10 %/% 3
1:10 %% 3
c(3, 5-2, 1+1+2) == 3
1:3 != 3:1
exp(1:5) < 100
(1:5)^2 >= 16
sqrt(2) ^ 2 == 2
sqrt(2) ^ 2 - 2
all.equal(sqrt(2)^2, 2)
all.equal(sqrt(2)^2, 1)
isTRUE(all.equal(sqrt(2)^2, 1))

x <- 1:3
y <- 4:6
x + y

c(Inf + 1, Inf - 1, Inf - Inf)
c(1 / Inf, Inf / 1, Inf / Inf)
c(NA + 1, NA * 5, NA + Inf)
x <- c(0, Inf, -Inf, NaN, NA)
is.finite(x)
is.infinite(x)
is.nan(x)
is.na(x)

#iteration
#------------------------

x <- 3
if(x > 2)
{y <- 2 * x 
z <- 3 * y}

#------------------------
x <- 0
repeat {
x <- x + 1
print(x)
if(x >= 10) break
}

#week 3 Tutorial
#------------------------

nums <- 1:200

my_df <- data.frame(factor= factor(c("yes","no","yes","yes", "yes", "no")), integer =  as.integer(1:6), numeric = 1:6)
summary(my_df)
subset(my_df, integer == 4)


#week 4 Lecture mats
#------------------------

num <- runif(30)
summary(num)
fac <- factor(sample(letters[1:5], 30, replace = TRUE))
summary(fac)
bool <- sample(c(TRUE, FALSE, NA), 30, replace = TRUE)
summary(bool)
dfr <- data.frame(num, fac, bool)
summary(dfr)
head(dfr)
str(dfr)
View(dfr)
View(head(dfr, 10))

#datasets
#------------------------

data(package = .packages(TRUE))
data("kidney", package = "survival")
head(kidney)

#importing data from text files
#------------------------
deer_data_txt <- read.table("datasets/RedDeerEndocranialVolume.txt", header=TRUE, fill=TRUE)
head(deer_data_txt)
deer_data_csv <- read.csv("datasets/RedDeerEndocranialVolume.csv", header=TRUE, fill=TRUE)
head(deer_data_csv)
identical(deer_data_txt, deer_data_csv)

crab_tag <- read.csv("datasets/crabtag.csv", header=FALSE, fill=TRUE, skip=10, nrow=2)
crab_tag
crab_tag <- read.csv("datasets/crabtag.csv", header=TRUE, fill=TRUE, skip=27, nrow=2)
crab_tag

colnames(crab_tag) <- c("MissionDay", "Date", "MaxTemp", "MinTemp", "MaxDepth", "MinDepth", "BattVolts")
head(crab_tag)

write.csv(crab_tag, "crab_tag.csv", row.names = FALSE, fileEncoding = "utf8")

#dates
#------------------------

library(lubridate)
library(nycflights13)

today()
now()

ymd("2017-01-31")
mdy("January 31st, 2017")
dmy("31-Jan-2017")
ymd(20170131)

class("2017-01-31")
ymd("2017-01-31")
class(ymd("2017-01-31"))

ymd_hms("2017-01-31 20:11:59")
mdy_hm("01/31/2017 08:01")
ymd(20170131, tz = "UTC")

library(nycflights13)
head(flights[,c("year", "month", "day", "hour", "minute")])

library(dplyr)
flts_dates <- head(flights[,c("year", "month", "day", "hour", "minute")])
mutate(flts_dates, departure = make_datetime(year, month, day, hour, minute))

as_datetime(today())
as_date(now())

as_datetime(0)
as_datetime(10)
as_datetime(86400)
as_datetime(31536000)
as_datetime(31536343)

datetime <- ymd_hms("2016-07-08 12:34:56")
year(datetime)
month(datetime)
mday(datetime)
yday(datetime)
wday(datetime)
month(datetime, label = TRUE)
wday(datetime, label = TRUE, abbr = FALSE)

(datetime <- ymd_hms("2016-07-08 12:34:56"))
year(datetime) <- 2020
datetime
month(datetime) <- 01
datetime
hour(datetime) <- hour(datetime) + 1
datetime

update(datetime, year = 2020, month = 2, mday = 2, hour = 2)
ymd("2015-02-01") %>% update(mday = 30)
ymd("2015-02-01") %>% update(hour = 400)

#week 5 Lecture mats
#------------------------

library(lattice)
dotplot(variety ~ yield | site, data = barley, groups = year)

library(dplyr)
library(nycflights13)

airlines
airports
planes
weather
flights

flights <- mutate(flights, key = row_number())
flights2 <- flights[, c("year", "month", "day", "hour", "origin", "dest", "tailnum", "carrier")]
flights2
left_join(flights2, airlines, by = "carrier")

inner_join()
left_join()
right_join()
full_join()

left_join(flights2, weather)
left_join(flights2, weather, by = c("year", "month", "day"))
left_join(flights2, airports, c("dest" = "faa"))

inner_join(x, y) merge(x, y)
left_join(x, y) merge(x, y, all.x = TRUE)
right_join(x, y) merge(x, y, all.y = TRUE),
full_join(x, y) merge(x, y, all.x = TRUE, all.y = TRUE)

inner_join(x, y, by = "z") SELECT * FROM x INNER JOIN y USING (z)
left_join(x, y, by = "z") SELECT * FROM x LEFT OUTER JOIN y USING (z)
right_join(x, y, by = "z") SELECT * FROM x RIGHT OUTER JOIN y USING (z)
full_join(x, y, by = "z") SELECT * FROM x FULL OUTER JOIN y USING (z)

#Vectors
#-----------------------

typeof(letters)
typeof(1:10)
x <- list("a", "b", 1:10)
length(x)

x <- c(ros = 1, ben = 2, ches = 3, ian = 4)
x

x <- 1:4
names(x) <- c("ros", "ben", "ches", "ian")
x

x <- (1:5)^2
x
x[c(1,3,5)]
x[c(-2,-4)]

1:10 %% 3 == 0
c(TRUE, TRUE, FALSE, NA)

typeof(1)
typeof(1L)

x <- c("a", "b")
class(x)
x <- c("a", "b", "abc")
class(x)
x[2]
class(x[2])
x[3]
class(x[3])

typeof(c(TRUE, 1L))
typeof(c(1L, 1.5))
typeof(c(1.5, "a"))

1:3 + 3:5
1:10 + 1:2
1:10 + c(1,2,1,2,1,2,1,2,1,2)

x <- list(1, 2, 3)
x
class(x)
str(x)
x_named <- list(a = 1, b = 2, c = 3)
str(x_named)

y <- list("a", 1L, 1.5, TRUE)
str(y)
z <- list(list(1, 2), list(3, 4))
str(z)

a <- list(a = 1:3, b = "a string", c = pi, d = list(-1, -5))
str(a[1:2])
str(a[4])
str(a[[1]])
str(a[[4]])
a$a
a[["a"]]

foo <- list(str="R", vec=c(1,2,3), bool=TRUE )
str(foo)
class(foo[3])
class(foo[[3]])
if( foo[[ "bool" ]] ){ print("Hi!") }
class( foo[[ "bool" ]] )

#Arrays and matrcies
#-----------------------

(three_d_array <- array(
1:24,
dim = c(4, 3, 2),
dimnames = list(
c("one", "two", "three", "four"),
c("ein", "zwei", "drei"),
c("un", "deux")
)))

(a_matrix <- matrix(
1:12,
nrow = 4, #ncol = 3 works the same
dimnames = list(
c("one", "two", "three", "four"),
c("ein", "zwei", "drei")
)))

(another_matrix <- matrix(
seq.int(2, 24, 2),
nrow = 4,
dimnames = list(
c("five", "six", "seven", "eight"),
c("vier", "funf", "sechs")
)))

dim(three_d_array)
dim(a_matrix)
nrow(a_matrix)
ncol(a_matrix)
length(three_d_array)
length(a_matrix)
rownames(a_matrix)
colnames(three_d_array)
a_matrix[1,1]
rbind(a_matrix, another_matrix)
cbind(a_matrix, another_matrix)

#week 6 Lecture mats
#------------------------

library(ggplot2)
head(mtcars)

g <- ggplot(data=mtcars, aes(x=disp, y=mpg))
g <- g + geom_point(size=2)
g <- g + geom_smooth(method=lm)
g

g <- ggplot(data=mtcars, aes(x=disp, y=mpg))
g <- g + geom_point(size=2)
g <- g + geom_smooth()
g

head(Orange)
g <- ggplot(data=Orange, aes(x=age, y=circumference))
g <- g + geom_point(size=2)
g <- g + geom_smooth(method=lm)
g

lm(circumference ~ age, data=Orange)

orange_model <- lm(circumference ~ age, data=Orange)
coef(orange_model)

lm(circumference ~ age, data=Orange)

g <- ggplot(data=Orange, aes(x=age, y=circumference))
g <- g + geom_point(size=2)
g <- g + geom_smooth(method=lm)
g <- g + geom_point(aes(x = 1300, y = 160.4,
colour = "red"))
g <- g + theme(legend.position="none")
g

g <- ggplot(data=Orange, aes(x=age, y=circumference))
g <- g + geom_point(size=2)
g <- g + geom_smooth()
g <- g + geom_point(aes(x = 1300, y = 160.4,
colour = "red"))
g <- g + theme(legend.position="none")
g

g <- ggplot(data=Orange, aes(x=age, y=circumference))
g <- g + geom_point(size=2)
g <- g + geom_smooth(method = "lm")
g <- g + geom_abline(slope = 0.11, intercept = 17.40,
na.rm = FALSE, show.legend = NA)
g <- g + geom_point(aes(x = 1300, y = 160.4,
colour = "red"))
g <- g + theme(legend.position="none")
g

model_orange <- loess(circumference ~ age, data = Orange)
modelFit_model_orange <- data.frame(predict(model_orange, se = TRUE))

orange_for_plot <- data.frame(cbind(age = Orange$age, circumference = Orange$circumference,fit = modelFit_model_orange$fit,upperBound = modelFit_model_orange$fit + 2 * modelFit_model_orange$se.fit,lowerBound = modelFit_model_orange$fit - 2 * modelFit_model_orange$se.fit))
head(orange_for_plot)

g <- ggplot(orange_for_plot, aes(age, circumference))
g <- g + geom_point()
g <- g + geom_linerange(aes(ymin = lowerBound,ymax = upperBound))
g <- g + geom_point(aes(age, fit,colour="red", size=0.5))
g <- g + geom_smooth(method = "loess")
g <- g + theme(legend.position="none")
g

g <- ggplot(orange_for_plot, aes(age, circumference))
g <- g + geom_point()
g <- g + geom_smooth(method = "loess")
g <- g + geom_line(aes(age, fit, colour="black"),orange_for_plot)
g <- g + theme(legend.position="none")
g

predict(model_orange, 400)
predict(model_orange, 800)

our_model <- lm(circumference ~ age, data=Orange)
our_residuals <- resid(our_model)
plot(Orange$age, our_residuals, ylab="Residuals", xlab="Age", main="Residuals: circumference ~ age")











